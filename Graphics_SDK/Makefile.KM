include Rules.make

BUILD=release
OMAPES=INVALIDVAL
FBDEV=yes
SUPPORT_XORG=0
EGLIMAGE=0
  ifeq ($(OMAPES),3.x)
    ifeq ($(BUILD),debug)
      GFX_LIB_SRCPATH := $(GFX_DBG_ES3_LIB_SRCPATH)
    else
      GFX_LIB_SRCPATH := $(GFX_REL_ES3_LIB_SRCPATH)
    endif
  endif
  ifeq ($(OMAPES),5.x)
    ifeq ($(BUILD),debug)
      GFX_LIB_SRCPATH := $(GFX_DBG_ES5_LIB_SRCPATH)
    else
      GFX_LIB_SRCPATH := $(GFX_REL_ES5_LIB_SRCPATH)
    endif
  endif
  ifeq ($(OMAPES),6.x)
    ifeq ($(BUILD),debug)
      GFX_LIB_SRCPATH := $(GFX_DBG_ES6_LIB_SRCPATH)
    else
      GFX_LIB_SRCPATH := $(GFX_REL_ES6_LIB_SRCPATH)
    endif
  endif
  ifeq ($(OMAPES),8.x)
    ifeq ($(BUILD),debug)
      GFX_LIB_SRCPATH := $(GFX_DBG_ES8_LIB_SRCPATH)
    else
      GFX_LIB_SRCPATH := $(GFX_REL_ES8_LIB_SRCPATH)
    endif
  endif

GFXLIB_INSTALL_INFOFILE=$(GFX_DEMOS_EXECPATH)/gfxinstallinfo.txt

.PHONY: all_km buildkernel
.PHONY: clean_km cleankernelmodule
.PHONY: help_km

all_km: prepare_km buildkernel builddevmem2

buildkernel:
	@echo "building the sgx kernel modules..."
	@export FBDEV
	@export SUPPORT_XORG

ifeq ($(SUPPORT_XORG),1)
	@cp $(KERNEL_INSTALL_DIR)/drivers/gpu/drm/*.c `pwd`/GFX_Linux_KM/services4/3rdparty/linux_drm/
endif

ifeq ($(BUILD),debug)
  ifeq ($(OMAPES),8.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) BUILD=debug TI_PLATFORM=ti335x clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti335x BUILD=debug
  else
    ifeq ($(OMAPES),6.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) BUILD=debug TI_PLATFORM=ti81xx clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti81xx BUILD=debug
  else
    ifeq ($(OMAPES),5.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) BUILD=debug TI_PLATFORM=omap3630 clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3630 BUILD=debug
    else
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH)  KERNELDIR=$(KERNEL_INSTALL_DIR) BUILD=debug TI_PLATFORM=omap3 clean && \
		make -C $(GFX_KERNMOD_SRCPATH)  KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3 BUILD=debug
    endif
    endif
  endif
else
  ifeq ($(OMAPES),8.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti335x clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti335x
  else
    ifeq ($(OMAPES),6.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti81xx clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=ti81xx
  else
    ifeq ($(OMAPES),5.x)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3630 clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3630

    else
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		export ARCH=arm && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3 clean && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) TI_PLATFORM=omap3
      endif
      endif
    endif
endif
	@echo "copying the sgx kernel modules to appropriate folder..."
	@cp -rf $(GFX_KERNMOD_SRCPATH)/pvrsrvkm.ko $(GFX_LIB_SRCPATH)/.
ifeq ($(OMAPES),8.x)
ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/linux_drm/drm.ko $(GFX_LIB_SRCPATH)/.
else
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/dc_ti335x_linux/omaplfb.ko $(GFX_LIB_SRCPATH)/.
endif
else
ifeq ($(OMAPES),6.x)
ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/linux_drm/drm.ko $(GFX_LIB_SRCPATH)/.
else
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/dc_ti81xx_linux/omaplfb.ko $(GFX_LIB_SRCPATH)/.
endif
else
ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/linux_drm/drm.ko $(GFX_LIB_SRCPATH)/.
else
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/dc_omapfb3_linux/omaplfb.ko $(GFX_LIB_SRCPATH)/.
endif
endif
endif
	@cp -rf $(GFX_KERNMOD_SRCPATH)/services4/3rdparty/bufferclass_ti/bufferclass_ti.ko $(GFX_LIB_SRCPATH)/.

prepare_km:
  ifeq ($(OMAPES),INVALIDVAL)
	@echo "Error: OMAPES value not specified (Mandatory value)"
	@echo "OMAPES = 3.x for OMAP35xx, 5.x for AM/DM37xx, 6.x for ti81xx, 8.x for 335x"
	@exit 1
  endif
	@mkdir -p $(GFX_DEMOS_EXECPATH)
  ifeq ($(OMAPES),3.x)
    ifeq ($(BUILD),debug)
	@echo "debug3.x" > $(GFXLIB_INSTALL_INFOFILE)
    else
	@echo "release3.x" > $(GFXLIB_INSTALL_INFOFILE)
    endif
  endif
  ifeq ($(OMAPES),5.x)
    ifeq ($(BUILD),debug)
	@echo "debug5.x" > $(GFXLIB_INSTALL_INFOFILE)
    else
	@echo "release5.x" > $(GFXLIB_INSTALL_INFOFILE)
    endif
  endif
  ifeq ($(OMAPES),6.x)
    ifeq ($(BUILD),debug)
	@echo "debug6.x" > $(GFXLIB_INSTALL_INFOFILE)
    else
	@echo "release6.x" > $(GFXLIB_INSTALL_INFOFILE)
    endif
  endif
  ifeq ($(OMAPES),8.x)
    ifeq ($(BUILD),debug)
	@echo "debug8.x" > $(GFXLIB_INSTALL_INFOFILE)
    else
	@echo "release8.x" > $(GFXLIB_INSTALL_INFOFILE)
    endif
  endif

############################### CLEAN ##################################
clean_km: cleankernelmodule devmem2clean

builddevmem2:
	@echo "building devmem2..."
	@export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		make -C $(GFX_DEVMEM2_SRCPATH) clean && make -C $(GFX_DEVMEM2_SRCPATH) && make -C $(GFX_DEVMEM2_SRCPATH) install

devmem2clean:
	@export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		make -C $(GFX_DEVMEM2_SRCPATH) clean

cleankernelmodule:
	@echo "cleaning the sgx kernel modules..."
ifeq ($(BUILD),debug)
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) BUILD=debug clean
else
	@export KERNELDIR=$(KERNEL_INSTALL_DIR) && \
		export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		make -C $(GFX_KERNMOD_SRCPATH) KERNELDIR=$(KERNEL_INSTALL_DIR) clean
endif

############################# INSTALL ##################################

install_km:
ifeq ($(OMAPES),INVALIDVAL)
	@echo "OMAPES value not specified (Mandatory value)..Exiting..."
	exit 1
endif
	@echo
	@echo "exporting necessary variables and installing..."
	@echo "########################################################"
	@echo "Please ensure that PSP Linux kernel is re-built atleast once,"
	@echo "Please refer online guide for further details."
	@echo "########################################################"
	@echo "creating directories..."
	@mkdir -p $(EXEC_DIR)
	@mkdir -p $(GFX_LIBRARY_TARGET_PATH)
	@echo "copying startup files..."
  ifeq ($(OMAPES),8.x)
  ifeq ($(SUPPORT_XORG),1)
	@cp $(GFX_PKG_TARGETFS_PATH)/335x_xorg-demo $(TARGETFS_INSTALL_DIR)/etc/init.d/335x-demo
  else
	@cp $(GFX_PKG_TARGETFS_PATH)/335x-demo $(TARGETFS_INSTALL_DIR)/etc/init.d
  endif
	@chmod 755 $(TARGETFS_INSTALL_DIR)/etc/init.d/335x-demo
  else
  ifeq ($(OMAPES),6.x)
  ifeq ($(SUPPORT_XORG),1)
	@cp $(GFX_PKG_TARGETFS_PATH)/38xx_xorg-demo $(TARGETFS_INSTALL_DIR)/etc/init.d/38xx-demo
  else
	@cp $(GFX_PKG_TARGETFS_PATH)/38xx-demo $(TARGETFS_INSTALL_DIR)/etc/init.d
  endif
	@chmod 755 $(TARGETFS_INSTALL_DIR)/etc/init.d/38xx-demo
  else
  ifeq ($(SUPPORT_XORG),1)
	@cp $(GFX_PKG_TARGETFS_PATH)/omap_xorg-demo $(TARGETFS_INSTALL_DIR)/etc/init.d/omap-demo
  else
	@cp $(GFX_PKG_TARGETFS_PATH)/omap-demo $(TARGETFS_INSTALL_DIR)/etc/init.d
  endif
	@chmod 755 $(TARGETFS_INSTALL_DIR)/etc/init.d/omap-demo
  endif
  endif
  ifeq ($(SUPPORT_XORG),1)
	@cp $(GFX_PKG_TARGETFS_PATH)/powervr_dri.ini $(TARGETFS_INSTALL_DIR)/etc/powervr.ini
	@cp -rf $(GFX_PKG_TARGETFS_PATH)/XSGX $(TARGETFS_INSTALL_DIR)/usr/local
	@cp $(GFX_PKG_TARGETFS_PATH)/xorg.conf $(TARGETFS_INSTALL_DIR)/usr/local/XSGX/etc
  else
	@cp $(GFX_PKG_TARGETFS_PATH)/powervr.ini $(TARGETFS_INSTALL_DIR)/etc
  endif
	@cp $(GFX_PKG_TARGETFS_PATH)/devmem2 $(TARGETFS_INSTALL_DIR)/etc/init.d
	@chmod 755 $(TARGETFS_INSTALL_DIR)/etc/init.d/devmem2
  ifeq ($(SUPPORT_XORG),1)
	@cp $(GFX_PKG_TARGETFS_PATH)/rc_dri.pvr $(TARGETFS_INSTALL_DIR)/etc/init.d/rc.pvr
  else
	@cp $(GFX_PKG_TARGETFS_PATH)/rc.pvr $(TARGETFS_INSTALL_DIR)/etc/init.d
  endif
	@echo "installing and adding kernel modules to target file system..."
	@export PATH=$(CSTOOL_PATH):$(PATH) && \
		export CROSS_COMPILE=$(CSTOOL_PREFIX) && \
		./addkernelmodules.sh $(KERNEL_INSTALL_DIR) $(TARGETFS_INSTALL_DIR)

	@echo "copying user space graphics libraries to target file system..."
  ifeq ($(OMAPES),3.x)
    ifeq ($(BUILD),release)
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/libGLESv2.so
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/libGLES_CM.so
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/libIMGegl.so
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/libsrv_um.so
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/rc.pvr
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/install.sh
	@cp -rf $(GFX_REL_ES3_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es3.x/eglinfo
       endif
    else
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/libGLESv2.so
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/libGLES_CM.so
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/libIMGegl.so
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/libsrv_um.so
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/rc.pvr
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/install.sh
	@cp -rf $(GFX_DBG_ES3_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es3.x/eglinfo
       endif

    endif
  endif
  ifeq ($(OMAPES),5.x)
    ifeq ($(BUILD),release)
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/libGLESv2.so
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/libGLES_CM.so
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/libIMGegl.so
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/libsrv_um.so
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/rc.pvr
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/install.sh
	@cp -rf $(GFX_REL_ES5_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es5.x/eglinfo
       endif
    else
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/libGLESv2.so
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/libGLES_CM.so
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/libIMGegl.so
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/libsrv_um.so
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/rc.pvr
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/install.sh
	@cp -rf $(GFX_DBG_ES5_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es5.x/eglinfo
       endif
    endif
  endif

  ifeq ($(OMAPES),6.x)
    ifeq ($(BUILD),release)
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/libGLESv2.so
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/libGLES_CM.so
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/libIMGegl.so
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/libsrv_um.so
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/rc.pvr
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/install.sh
	@cp -rf $(GFX_REL_ES6_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es6.x/eglinfo
       endif
    else
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/libGLESv2.so
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/libGLES_CM.so
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/libIMGegl.so
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/libsrv_um.so
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/rc.pvr
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/install.sh
	@cp -rf $(GFX_DBG_ES6_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es6.x/eglinfo
       endif
    endif
  endif
  ifeq ($(OMAPES),8.x)
    ifeq ($(BUILD),release)
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/libGLESv2.so
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/libGLES_CM.so
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/libIMGegl.so
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/libsrv_um.so
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/rc.pvr
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/install.sh
	@cp -rf $(GFX_REL_ES8_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_rel_es8.x/eglinfo
       endif
    else
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH) $(GFX_LIBRARY_TARGET_PATH)/.
       ifeq ($(EGLIMAGE),1)
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/libGLESv2_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/libGLESv2.so
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/libGLES_CM_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/libGLES_CM.so
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/libIMGegl_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/libIMGegl.so
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/libEGL_eglimage.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/libEGL.so
       endif
       ifeq ($(SUPPORT_XORG),1)
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/libsrv_um_dri.so $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/libsrv_um.so
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/rc_dri.pvr $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/rc.pvr
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/install_dri.sh $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/install.sh
	@cp -rf $(GFX_DBG_ES8_LIB_SRCPATH)/xeglinfo $(GFX_LIBRARY_TARGET_PATH)/gfx_dbg_es8.x/eglinfo
       endif
    endif
  endif
	@echo "copying install information to target file system..."
	@cd $(GFX_DEMOS_EXECPATH) && \
		cp -rf * $(EXEC_DIR)/.

############################# HELP ##################################

help_km:
	@echo ""
	@echo "Usage (for build): make BUILD={debug | release} OMAPES={ 3.x | 5.x | 6.x | 8.x} FBDEV={yes | no} SUPPORT_XORG={1 | 0}"
	@echo "Specifying OMAPES is mandatory. BUILD=release by default FBDEV=YES and SUPPORT_XORG=0 by default"
	@echo "Usage (for install): make BUILD=(debug | release} OMAPES={ 3.x | 5.x| 6.x | 8.x} install"
	@echo "See online Graphics Getting Started Guide for further details."
	@echo ""

###########################################################################
